from dataclasses import dataclass
{% if datamodelType.doAddList -%}
from typing import List
{% endif -%}
{% for dependency in datamodelType.dependencies -%}
    from {{ dependency.importName }} import {{ dependency.name }}
{% endfor %}

@dataclass
class {{ datamodelType.name }}:
{%- for member in datamodelType.members %}
    {{ member.name }}: {{ member.type }}
{%- endfor %}

    @classmethod
    def from_data(cls, data):
        {%- for member in datamodelType.members -%}
            {%- if member.needConversion %}
                {%- if member.innerType == "" %}
        data['{{ member.name}}'] = {{ member.type }}.from_data(data['{{ member.name}}'])
                {%- else %}
        data['{{ member.name}}'] = [{{ member.innerType }}.from_data(v) for v in data['{{ member.name}}']]
            {%- endif %}
        {%- endif %}
        {%- endfor %}
        return cls(**data)